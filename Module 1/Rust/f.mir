// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at f.rs:1:11: 1:11

    bb0: {
        return;                          // scope 0 at f.rs:3:2: 3:2
    }
}

fn f(_1: i8, _2: i8) -> i8 {
    debug a => _1;                       // in scope 0 at f.rs:5:6: 5:7
    debug b => _2;                       // in scope 0 at f.rs:5:13: 5:14
    let mut _0: i8;                      // return place in scope 0 at f.rs:7:9: 7:14
    let mut _3: bool;                    // in scope 0 at f.rs:8:8: 8:13
    let mut _4: i8;                      // in scope 0 at f.rs:8:8: 8:9
    let mut _5: i8;                      // in scope 0 at f.rs:8:12: 8:13
    let mut _6: (i8, bool);              // in scope 0 at f.rs:9:9: 9:16
    let mut _7: i8;                      // in scope 0 at f.rs:11:14: 11:15
    let mut _8: (i8, bool);              // in scope 0 at f.rs:11:9: 11:15
    scope 1 {
        debug x => _0;                   // in scope 1 at f.rs:7:9: 7:14
    }

    bb0: {
        _0 = _1;                         // scope 0 at f.rs:7:17: 7:18
        _4 = _1;                         // scope 1 at f.rs:8:8: 8:9
        _5 = _2;                         // scope 1 at f.rs:8:12: 8:13
        _3 = Gt(move _4, move _5);       // scope 1 at f.rs:8:8: 8:13
        switchInt(move _3) -> [false: bb3, otherwise: bb1]; // scope 1 at f.rs:8:8: 8:13
    }

    bb1: {
        _6 = CheckedAdd(_0, const 20_i8); // scope 1 at f.rs:9:9: 9:16
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, const 20_i8) -> bb2; // scope 1 at f.rs:9:9: 9:16
    }

    bb2: {
        _0 = move (_6.0: i8);            // scope 1 at f.rs:9:9: 9:16
        goto -> bb5;                     // scope 1 at f.rs:8:5: 12:6
    }

    bb3: {
        _7 = _2;                         // scope 1 at f.rs:11:14: 11:15
        _8 = CheckedAdd(_0, _7);         // scope 1 at f.rs:11:9: 11:15
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", _0, move _7) -> bb4; // scope 1 at f.rs:11:9: 11:15
    }

    bb4: {
        _0 = move (_8.0: i8);            // scope 1 at f.rs:11:9: 11:15
        goto -> bb5;                     // scope 1 at f.rs:8:5: 12:6
    }

    bb5: {
        return;                          // scope 0 at f.rs:14:2: 14:2
    }
}
